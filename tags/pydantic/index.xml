<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Pydantic on anthony lukach</title><link>https://alukach.com/tags/pydantic/</link><description>Recent content in Pydantic on anthony lukach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 05 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://alukach.com/tags/pydantic/index.xml" rel="self" type="application/rss+xml"/><item><title>Type-based message processing with Pydantic</title><link>https://alukach.com/posts/message-processing-with-pydantic/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/message-processing-with-pydantic/</guid><description>When building systems to process messages, it&amp;rsquo;s not unlikely to find yourself in a situation where you need to process a number of inputted heterogeneous messages (i.e. messages of varying shapes/types). For example, consider a situation where you are processing messages from an SQS queue via a Lambda function. This post attempts to highlight how this can be achieved in a clean and elegant manner by utilizing Pydantic, Python&amp;rsquo;s typing system, and some helpers from the Python standard library.</description></item></channel></rss>