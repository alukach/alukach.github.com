<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>athena on anthony lukach</title><link>https://alukach.com/tags/athena/</link><description>Recent content in athena on anthony lukach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 21 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://alukach.com/tags/athena/index.xml" rel="self" type="application/rss+xml"/><item><title>Normalizing heterogeneous decimal Ion data in Athena</title><link>https://alukach.com/posts/heterogeneous-ion-decimal-data/</link><pubDate>Mon, 21 Aug 2023 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/heterogeneous-ion-decimal-data/</guid><description>Recently, we exported data from a DynamoDB table to S3 in AWS Ion format. However, due to the fact that the DynamoDB table had varied formats for some numeric properties, the export serialized these numeric data columns in a few different formats: as a decimal (1234.), as an Ion decimal type (123d1), and as a string (&amp;quot;1234&amp;quot;).
When querying this data in Athena, the following SQL did the trick to convert any of those formats into a bigint:</description></item></channel></rss>