<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Github Actions on anthony lukach</title><link>https://alukach.com/tags/github-actions/</link><description>Recent content in Github Actions on anthony lukach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://alukach.com/tags/github-actions/index.xml" rel="self" type="application/rss+xml"/><item><title>Security-conscious cloud deployments from Github Actions via OpenID Connect</title><link>https://alukach.com/posts/oidc-github-actions/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/oidc-github-actions/</guid><description>Goals This ticket is focused on how we can securely deploy to a major cloud provider environment (e.g. AWS, Azure, GCP) from within our Github Actions workflows.
Why is this challenging? A naive solution to this problem is to generate some cloud provider credentials (e.g. AWS Access Keys) and to store them as a Github Secret. Our Github Actions can then utilize these credentials in its workflows. However, this technique contains a number of concerns:</description></item><item><title>Roll your own PR preview CI pipeline</title><link>https://alukach.com/posts/diy-pr-previews/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/diy-pr-previews/</guid><description>Goal We want a CI pipeline that will build and deploy an instance of our frontend application for every PR created in our frontend repo. Additionally, we want to be able to easily spin up applications with overridden configuration to allow developers to test the frontend against experimental backends. Finally, we want a reporting mechanism to inform developers when and where these deployed environments are available.
Other Options Before you jump into this, consider that there are out-of-the-box solutions to solve this problem mentioned in the followup at the bottom of this page.</description></item></channel></rss>