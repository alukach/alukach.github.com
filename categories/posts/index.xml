<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on anthony lukach</title><link>https://alukach.com/categories/posts/</link><description>Recent content in Posts on anthony lukach</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 20 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://alukach.com/categories/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Security-conscious cloud deployments from Github Actions via OpenID Connect</title><link>https://alukach.com/posts/oidc-github-actions/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/oidc-github-actions/</guid><description>Goals This ticket is focused on how we can securely deploy to a major cloud provider environment (e.g. AWS, Azure, GCP) from within our Github Actions workflows.
Why is this challenging? A naive solution to this problem is to generate some cloud provider credentials (e.g. AWS Access Keys) and to store them as a Github Secret. Our Github Actions can then utilize these credentials in its workflows. However, this technique contains a number of concerns:</description></item><item><title>Roll your own PR preview CI pipeline</title><link>https://alukach.com/posts/diy-pr-previews/</link><pubDate>Sun, 21 Nov 2021 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/diy-pr-previews/</guid><description>Goal We want a CI pipeline that will build and deploy an instance of our frontend application for every PR created in our frontend repo. Additionally, we want to be able to easily spin up applications with overridden configuration to allow developers to test the frontend against experimental backends. Finally, we want a reporting mechanism to inform developers when and where these deployed environments are available.
Other Options Before you jump into this, consider that there are out-of-the-box solutions to solve this problem mentioned in the followup at the bottom of this page.</description></item><item><title>Putting animated SVGs of Terminal Output into Github READMEs</title><link>https://alukach.com/posts/animated-terminal-output/</link><pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/animated-terminal-output/</guid><description>Have you just written a new ✨fancy CLI✨ and want to demo it in your Github Readme? Recording your terminal output is a nice way to demonstrate the experience.
Here&amp;rsquo;s an example of what we&amp;rsquo;re going to make:
Steps Install Dependencies asciinema: brew install asciinema svg-term-cli: npm install -g svg-term-cli Setup your terminal Some tips:
Font/screen size matters. The asciinema output will look just as it does in your terminal.</description></item><item><title>Using CloudFront as a Reverse Proxy</title><link>https://alukach.com/posts/using-cloudfont-as-a-reverse-proxy/</link><pubDate>Fri, 02 Oct 2020 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/using-cloudfont-as-a-reverse-proxy/</guid><description>Alternate title: How to be master of your domain.
The basic idea of this post is to demonstrate how CloudFront can be utilized as a serverless reverse-proxy, allowing you to host all of your application&amp;rsquo;s content and services from a single domain. This minimizes a project&amp;rsquo;s TLD footprint while providing project organization and performance along the way.
Why Within large organizations, bureaucracy can make it a challenge to obtain a subdomain for a project.</description></item><item><title>Tips for working with a large number of files in S3</title><link>https://alukach.com/posts/tips-for-working-with-a-large-number-of-files-in-s3/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/tips-for-working-with-a-large-number-of-files-in-s3/</guid><description>I would argue that S3 is basically AWS' best service. It&amp;rsquo;s super cheap, it&amp;rsquo;s basically infinitely scalable, and it never goes down (except for when it does). Part of its beauty is its simplicity. You give it a file and a key to identify that file, you can have faith that it will store it without issue. You give it a key, you can have faith that it will return the file represented by that key, assuming there is one.</description></item><item><title>Using CloudFormation's Fn::Sub with Bash parameter substitution</title><link>https://alukach.com/posts/cloudformation-sub-ref/</link><pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/cloudformation-sub-ref/</guid><description>Let&amp;rsquo;s say that you need to inject a large bash script into a CloudFormation AWS::EC2::Instance Resource&amp;rsquo;s UserData property. CloudFormation makes this easy with the Fn::Base64 intrinsic function:
1 2 3 4 5 6 7 8 9 10 11 12 AWSTemplateFormatVersion:&amp;#39;2010-09-09&amp;#39;Resources:VPNServerInstance:Type:AWS::EC2::InstanceProperties:ImageId:ami-efd0428fInstanceType:m3.mediumUserData:Fn::Base64:|#!/bin/sh echo &amp;#34;Hello world&amp;#34; In your bash script, you may even want to reference a parameter created elsewhere in the CloudFormation template. This is no problem with Cloudformation&amp;rsquo;s Fn::Sub instrinsic function:</description></item><item><title>Hosting Jupyter at a subdomain via Cloudflare</title><link>https://alukach.com/posts/serving-jupyter/</link><pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/serving-jupyter/</guid><description>Full Disclosure: I am NOT an expert at Jupyter or Anaconda (which I am using in this project), there may be some bad habits below&amp;hellip;
Below is a quick scratchpad of the steps I took to serve Jupyter from a subdomain. Jupyter is running behind NGINX on an OpenStack Ubuntu instance and the domain&amp;rsquo;s DNS is set up to use Cloudflare to provides convenient SSL support. I was suprised by the lack of documentation for this process, prompting me to document my steps taken here.</description></item><item><title>Django Admin Fu, part 2</title><link>https://alukach.com/posts/django-admin-pt-2/</link><pubDate>Mon, 15 Dec 2014 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/django-admin-pt-2/</guid><description>Continuing with the Django Admin Fu post part 1.
Action with Intermediate Page Sometimes you may need an admin action that, when submitted, takes the user to a form where they provides some additional detail. The docs mention a bit about providing intermediate pages, but not a lot. It states:
Generally, something like [writing a intermediate page through the admin] isn’t considered a great idea. Most of the time, the best practice will be to return an HttpResponseRedirect and redirect the user to a view you’ve written, passing the list of selected objects in the GET query string.</description></item><item><title>Django Admin Fu, part 1</title><link>https://alukach.com/posts/django-admin-pt-1/</link><pubDate>Tue, 04 Nov 2014 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/django-admin-pt-1/</guid><description>I&amp;rsquo;ve been putting some time into building out the Django Admin site for one of my company&amp;rsquo;s projects. Here are some notes I&amp;rsquo;ve taken about straying away from the beaten path. I find surprisingly little information about how to do these things on StackOverflow or elsewhere. These were put used when working with Django 1.6.7.
Fake The Model, Make The View You may want a form on the Django Admin that exists along side the model views but doesn&amp;rsquo;t actually represent a model.</description></item><item><title>Hello World</title><link>https://alukach.com/posts/hello-world/</link><pubDate>Wed, 20 Feb 2013 00:00:00 +0000</pubDate><guid>https://alukach.com/posts/hello-world/</guid><description>I&amp;rsquo;m just getting things set up with this new blog. I&amp;rsquo;ve been hearing about this movement towards static-generated blogs for a while now, ever since reading this article about the Obama Campaign&amp;rsquo;s fundraising platform. The idea of stepping away from databases and convulated CMS&amp;rsquo;s and PHP attracted me.
This site is built with Jekyll. After seeing how simple the template syntax was (based on LiquidMarkup, not unlike Django or Jinja2&amp;rsquo;s syntax), I was sold.</description></item></channel></rss>